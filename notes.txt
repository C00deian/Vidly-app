// ------------------------------ Basics Of Node Js -----------------------------------

⏺ What is Node :-  node js is a runtime environment for executing Javascript Code.
API:- Application Programming Interface.


// ------------------------------ Express - RESTful Services - API -----------------------------------

CRUD Operation:
C - Create 
R - Read
U - Update 
D - Delete

HTTP Methods:
GET  -    to get data 
POST -    to create data
PUT  -    to update data
DELETE -  to delete data

➤ Example HTTP Method:- 

1. GET CUSTOMERS

Request  
GET /api/customers                       

Response
[ { id:1 , name:"ritik"}, { id:2 , name:"Arun"}, { id:3 , name:"ajay"},  .....]


2. GET A CUSTOMER

Request  
GET /api/customers/id                     

Response
{ id:1 , name:"ritik"}


3. UPDATE A CUSTOMER

Request  
PUT  /api/customers/id  

{name: " "}
Response

{ id:1 , name:" "}



4. DELETE A CUSTOMER

Request  
DELETE  /api/customers/id  


Response
Optinal:


5. CREATE  A CUSTOMER

Request  
POST  /api/customers

{ name:"sohan"}

Response



// ------------------------------ Environment Variables -----------------------------------

Definition:- we need to define port according to our application where it is hosted. for development environment we use port according our desired port but at the production environment port is defined dynamically according to javascript engines.

for this we can use:

const port  = process.env.PORT || 3000 



// ------------------------------ Route Parameters -----------------------------------

Definition:- Route parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the req.params object, with the name of the route parameter specified in the path as their respective keys
 
 Example:-
  app.get('/api/courses/:id', (req, res) => {
   const  id = req.params.id
    console.log(res.send(id));
})

We can also send Query:-

 const query  = req.query;
 http://localhost:3000/api/courses/1?sortByName=raj



// ------------------------------ Express - Advance Topics -----------------------------------

// ------------------------------ Middleware -----------------------------------


Question 1 : What is a rq.body property and express.json() middleware ?
Answer:  The req.body property contains key-value pairs of data submitted in the request body.
By default, it is undefined and is populated when you use a middleware called body-parsing such as express.urlencoded() or express.json().


app.use(express.static('public'))
static middleware function is used to serve static file to the server.



// ------------------------------ Templating Engine -----------------------------------

Defintion : A template engine enables you to use static template files in your application. At runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client. This approach makes it easier to design an HTML page.




// ------------------------------ Asynchronous  Javascript -----------------------------------


function getUser(id) {
  return new Promise(function (resolve, rejected) {
    // kick off some async work
    setTimeout(() => {
      console.log("Reading a user from a database....");
      resolve({ id: id, gitHubUsername: "Ritik" });
    }, 2000);
  });
}


function getRepositories(username) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log(`Github API is Calling...`);
    //   resolve(["repo1", "repo2", "repo3"]);
      reject(new Error("could not get the repos.."));
    }, 2000);
  });
}


function getCommits(repo) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log(`Commits API Calling...`);
      resolve(["repo 1 all commits..."]);
    }, 2000);
  });
}


 What is Promises ? 

A promise is an Object that holds the eventual results of  Asynchronous  operations.
when we perform a asynchronous  operation that operation might be completed successfully or might be failed.
if the operation completed successfully we say the promise is resolved or full filled.
if the operation got failed by any reason we say the promise is rejected.


example:

// Promise based approach

getUser(1)
.then((user) => getRepositories(user.gitHubUsername))
.then((repo) => getCommits(repo[0]))
.then((commit) => console.log("commits", commit))
.catch((err) => console.log("Error", err.message));



What is Async and Await.. ?

 Any function that can return a promise we can await the result of that function.
 whenever we are using await in a function we need to decorate  that function with  async modifier.
 in this approach .catch method is not avilable like promises scenario.
 so we have to  use try {} catch (error) {} for handling error and results.


example: 

Async / Await approach....

async function displayCommits() {
  try {
    const user = await getUser(1);
    const repos = await getRepositories(user.gitHubUsername);
    const commit = await getCommits(repos[0]);
    console.log("commits:", commit);
  } catch (error) {
    console.log("error:", error.message);
  }
}

displayCommits();




// ------------------------------ Introducing MongoDB -----------------------------------


What is MongoDB ? 

MongoDB is a document database with the scalablity and flexiblity that you want with the querying and indexing that you need.


Schema and Model will be add letter 



// ------------------------------ Quering Document -----------------------------------

➤ Quering Document:

async function getCourse() {

  const result = await Course
    .find( )
    .limit(10)
    .sort({ name: 1 })
    .select({ name: 1, tags: 1 });

  console.log(result);
}

getCourse();

output :

[
  {
    _id: new ObjectId('66f7a73f08757a755c29974d'),
    name: 'Arun',
    tags: [ 'Instagram', 'Chats' ]
  },
  {
    _id: new ObjectId('66f7aa2321658257a7f78cd8'),
    name: 'Arun',
    tags: [ 'Angular', 'React' ]
  },
  {
    _id: new ObjectId('66f7a66be1cd576b262b063c'),
    name: 'Ritik',
    tags: [ 'node js', 'mongo' ]
  }
]


➤ Comparison Query Operator:

$eq ( equal)
$gt ( greater than)
$gte ( greater than or equal to)
$lte ( less than or equal to)
$ne ( not equal)
$lt ( less than)
$in array
$nin ( not in ) array


example:

const result = await Course
.find({ price: { $gt: 10, $lt: 20 } })
.find({ price: { $in: [10, 20, 30] } })



➤ Logical Query Operator:

or 
and

example:

const result = await Course
.find()
.or([{authore:'Mosh'},{ isPublished:true}])
.limit(10)
.sort({ name: 1 })
.select({ name: 1, tags: 1 });




➤ Regular Expression:

const result = await Course
//  Starts with Arun
    .find({ authore: /^Arun/ })

//   Ends with Kumar
    .find({ authore: /Kumar$/i })

//   Contains Mosh anywhere
    .find({ authore: /.*Mosh.*/i })




➤ Counting:

const result = await Course
.find({ name: "Arun", isPublished: true })
.limit(10)
.sort({ name: 1 })
// .select({ name: 1, tags: 1 });
 .countDocuments()

Note: we can not perform both queries .select() and .countDocuments()
simultaneously.




➤ Pagination:

const PageNumber = 2;
const pageSize = 10;

//   /api/courses?pageNumber=2&pageSize=10

const result = await Course
.find({ name: "Arun", isPublished: true })
.skip((PageNumber - 1)* pageSize)
.limit(pageSize)
.sort({ name: 1 })
.select({ name: 1, tags: 1 });



Important Point:
1. when we pass an Object with 1 in select query like .select({ name: 1}) it means include this field in the result.
 and when we pass an Object with 0 then it is considered as exclude that field  in  the result.




// ------------------------------ Udpating a Document -----------------------------------



➤ Updating a document by using : Query first approach

✦ this approach is useful if we recieve an input from the client and we have gone make sure that the update is valid opration.

Step are as Fallow:

step 1:- find the document by findById()
step 2:- Modify its Properties..

 course.set({
   authore: 'New Author',
   isPublished: true
 });

step 3:- save it by using save();



Example:

async function updateCourse(id) {

  const course = await Course.findById(id);
  if (!course) return;

course.set({
 authore: 'New Author',
isPublished: true
 });
  
  const result = await course.save();
  console.log(result);
}

updateCourse("66f7a66be1cd576b262b063c");




➤ Updating a document by using : Update first approach

✦ sometimes we know what we are doing still not recieving any input from the user in this case we already know about the document existance.


example 1:

async function updateCourse(id) {
  const result = await Course.updateOne(
    { _id: id },
    {
      $set: {
        authore: "Mummy",
        isPublished: false,
      },
    }
  );

  console.log(result);
}

updateCourse("66f7a66be1cd576b262b063c");

Note:- in this way we are not going to get updated document for further refrences.



Example 2: 

async function updateCourse(id) {
  const result = await Course.findByIdAndUpdate(id, {
    $set: {
      authore: "papa",
      isPublished: false,
    },
  },{new:true});

  console.log(result);
}

updateCourse("66f7a66be1cd576b262b063c");

Note:- in this way we will get updated document and also we can use it for further refrences.

{new:true} : by using this object we will get updated document instead of original document.




➤ Updating one or more  documents by using : Update first approach

async function updateCourse() {
  const result = await Course.updateMany({ isPublished: false }, {
    $set: {
       authore: "papa",
      isPublished: true,
    },
  } );

  console.log(result);
}

updateCourse();

Note:- in this way we are not going to get updated documents for further refrences.



// ------------------------------ Deleting Document -----------------------------------

example 1:

async function deleteCourse() {
  const result = await Course.deleteOne({ name: "Arun" });
  console.log(result);
}

deleteCourse();

Note:- in this way we are not going to get deleted documents for further refrences.




example 2:

async function deleteCourse() {
  const result = await Course.findOneAndDelete({ name: "Arun" });
  console.log(result);
}

deleteCourse();

Note:- in this way we will get deleted document and also we can use it for further refrences.

 